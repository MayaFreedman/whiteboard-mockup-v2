/**
 * Auto-generated PNG emoji registry
 * Generated from PNG files - updated to use PNG emojis
 * 
 * This file will be regenerated by running: node scripts/generatePngRegistry.js
 */

import { getCustomStamps, CustomStamp } from './customStamps';

export interface IconInfo {
  name: string;
  category: string;
  path: string;
  preview: string;
}

// Basic categorization for existing SVG system compatibility
// Will be replaced with auto-generated data when script is run
export const iconRegistry: IconInfo[] = [
  // Sample entries - these will be replaced by the generation script
  {
    name: "Grinning Face",
    category: "emotions",
    path: "/png-emojis/1F600.png",
    preview: "😀",
  },
  {
    name: "Face with Tears of Joy",
    category: "emotions",
    path: "/png-emojis/1F602.png",
    preview: "😂",
  },
  {
    name: "Red Heart",
    category: "emotions",
    path: "/png-emojis/2764.png",
    preview: "❤️",
  },
  {
    name: "Thumbs Up",
    category: "objects",
    path: "/png-emojis/1F44D.png",
    preview: "👍",
  },
  {
    name: "Sun",
    category: "nature",
    path: "/png-emojis/2600.png",
    preview: "☀️",
  },
  {
    name: "United States Flag",
    category: "flags",
    path: "/png-emojis/1F1FA-1F1F8.png",
    preview: "🇺🇸",
  }
];

/**
 * Get icon by path
 */
export function getIconByPath(path: string): IconInfo | undefined {
  return iconRegistry.find(icon => icon.path === path);
}

/**
 * Get icons by category
 */
export function getIconsByCategory(category: string): IconInfo[] {
  return iconRegistry.filter(icon => icon.category === category);
}

/**
 * Get all available categories
 */
export function getCategories(): string[] {
  const categories = Array.from(new Set(iconRegistry.map(icon => icon.category)));
  return categories.sort();
}

/**
 * Get category display name
 */
export function getCategoryDisplayName(category: string): string {
  const displayNames: Record<string, string> = {
    'emotions': 'Emotions & Faces',
    'people': 'People & Body',
    'nature': 'Nature & Weather', 
    'food': 'Food & Drink',
    'activities': 'Activities & Sports',
    'travel': 'Travel & Transport',
    'objects': 'Objects & Symbols',
    'symbols': 'Symbols',
    'flags': 'Country Flags'
  };
  return displayNames[category] || category.charAt(0).toUpperCase() + category.slice(1);
}

/**
 * Get custom stamps as icons
 */
export function getCustomStampsAsIcons(): IconInfo[] {
  const customStamps = getCustomStamps();
  return customStamps.map((stamp: CustomStamp) => ({
    name: stamp.name,
    category: 'custom',
    path: stamp.dataUrl,
    preview: stamp.preview
  }));
}

/**
 * Get all categories including custom
 */
export function getAllCategories(): string[] {
  const standardCategories = getCategories();
  const customStamps = getCustomStamps();
  
  if (customStamps.length > 0) {
    return ['custom', ...standardCategories];
  }
  
  return standardCategories;
}

/**
 * Get icons by category including custom stamps
 */
export function getIconsByCategoryWithCustom(category: string): IconInfo[] {
  if (category === 'custom') {
    return getCustomStampsAsIcons();
  }
  return getIconsByCategory(category);
}

/**
 * Get all icons including custom stamps
 */
export function getAllIcons(): IconInfo[] {
  return [...iconRegistry, ...getCustomStampsAsIcons()];
}

// Export stats for debugging
export const TOTAL_EMOJIS = iconRegistry.length;
export const GENERATED_AT = new Date().toISOString();